"use strict";(self.webpackChunklfx_rushstack_io=self.webpackChunklfx_rushstack_io||[]).push([[865],{158:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(6393);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),k=r,u=m["".concat(s,".").concat(k)]||m[k]||c[k]||i;return n?a.createElement(u,o(o({ref:t},d),{},{components:n})):a.createElement(u,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},8776:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var a=n(9122),r=n(2501),i=(n(6393),n(158)),o=["components"],l={title:"SemVer"},s=void 0,p={unversionedId:"pages/concepts/semver",id:"pages/concepts/semver",title:"SemVer",description:"A lockfile can be thought of as a solution to a large multivariable equation, where the variables are",source:"@site/docs/pages/concepts/semver.md",sourceDirName:"pages/concepts",slug:"/pages/concepts/semver",permalink:"/pages/concepts/semver",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/lfx.rushstack.io/docs/pages/concepts/semver.md",tags:[],version:"current",frontMatter:{title:"SemVer"},sidebar:"docsSidebar",previous:{title:"Version conflicts",permalink:"/pages/concepts/version_conflicts"},next:{title:"Installation models",permalink:"/pages/concepts/install_models"}},d={},m=[{value:"&quot;Version&quot; cheat sheet",id:"version-cheat-sheet",level:2},{value:"&quot;Version range&quot; cheat sheet",id:"version-range-cheat-sheet",level:2},{value:"SemVer surprises",id:"semver-surprises",level:2},{value:"&quot;Dependency specifier&quot; cheat sheet",id:"dependency-specifier-cheat-sheet",level:2},{value:"See Also",id:"see-also",level:2}],c={toc:m},k="wrapper";function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(k,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A lockfile can be thought of as a solution to a large multivariable equation, where the variables are\nversion ranges (",(0,i.kt)("inlineCode",{parentName:"p"},'"^1.0.0"'),") and the solved values are versions (",(0,i.kt)("inlineCode",{parentName:"p"},'"1.2.3"'),"). Let's review the mechanics\nof NPM package versioning."),(0,i.kt)("p",null,"When an NPM package is published to an NPM registry, the package folder gets compressed into a ",(0,i.kt)("inlineCode",{parentName:"p"},"tar"),' archive\n("tarball") and uploaded to the NPM registry server. The release is identified by a package ',(0,i.kt)("inlineCode",{parentName:"p"},'"name"'),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},'"version"'),", which are specified in the published ",(0,i.kt)("strong",{parentName:"p"},"package.json")," file. For example:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"my-library/package.json")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "name": "my-library",\n  "version": "1.2.3",\n  "description": "This is an example NPM package"\n}\n')),(0,i.kt)("p",null,"For published packages, the version is a mostly unique key identifying a given release, within\na given NPM registry server at least. Most production registries will not allow a given version\nto be republished with different content, since that can interfere with caching and reproducible builds.\nIf a critical security vulnerability is discovered for the ",(0,i.kt)("inlineCode",{parentName:"p"},"1.2.3")," release, we can mark that version\nas ",(0,i.kt)("strong",{parentName:"p"},'"deprecated"'),". If the release is found to contain malware or other content that violates a policy,\nwe could mark it as ",(0,i.kt)("strong",{parentName:"p"},'"unpublished"')," (preventing installation entirely). Either way, when a fix is\npublished, it will need to use a different version number such as ",(0,i.kt)("inlineCode",{parentName:"p"},"1.2.4"),"."),(0,i.kt)("p",null,'A package can "depend on" other packages, which essentially means that in order to install the package,\nthe package manager must also install those dependencies. Dependencies are specified in ',(0,i.kt)("strong",{parentName:"p"},"package.json"),"\nusing the fields ",(0,i.kt)("inlineCode",{parentName:"p"},'"dependencies"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"devDependencies"'),", and ",(0,i.kt)("inlineCode",{parentName:"p"},'"peerDependencies"'),". (Various other fields\ncan influence how dependencies get installed, for example ",(0,i.kt)("inlineCode",{parentName:"p"},'"optionalDependencies"')," and\n",(0,i.kt)("inlineCode",{parentName:"p"},'"peerDependenciesMeta"'),".)"),(0,i.kt)("p",null,"Here's an example where ",(0,i.kt)("inlineCode",{parentName:"p"},"my-app")," depends on ",(0,i.kt)("inlineCode",{parentName:"p"},"my-library"),":"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"my-app/package.json")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "name": "my-app",\n  "version": "0.0.0",\n  "dependencies": {\n    "my-library": "^1.2.0"\n  }\n}\n')),(0,i.kt)("p",null,"These version syntaxes are defined by the ",(0,i.kt)("strong",{parentName:"p"},"Semantic Version")," standard, ",(0,i.kt)("strong",{parentName:"p"},'"SemVer"')," for short. The\n",(0,i.kt)("a",{parentName:"p",href:"https://semver.org/"},"SemVer Specification")," defines two fundamentally different kinds of syntaxes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"version")," identifies a single specific release of an NPM package.\nFor example, ",(0,i.kt)("inlineCode",{parentName:"li"},"1.2.3")," used in the ",(0,i.kt)("inlineCode",{parentName:"li"},'"version"')," field above."),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"version range")," is a pattern that can match multiple possible versions.\nFor example ",(0,i.kt)("inlineCode",{parentName:"li"},"^1.2.0")," used in the ",(0,i.kt)("inlineCode",{parentName:"li"},'"dependencies"')," field above. It matches ",(0,i.kt)("inlineCode",{parentName:"li"},"1.2.0")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"1.7.9"),"\nbut not ",(0,i.kt)("inlineCode",{parentName:"li"},"1.1.0")," nor ",(0,i.kt)("inlineCode",{parentName:"li"},"2.0.0"),". See below for details.")),(0,i.kt)("h2",{id:"version-cheat-sheet"},'"Version" cheat sheet'),(0,i.kt)("p",null,"SemVer versions must have three parts (",(0,i.kt)("inlineCode",{parentName:"p"},"MAJOR.MINOR.PATCH"),") and sometimes four parts (",(0,i.kt)("inlineCode",{parentName:"p"},"MAJOR.MINOR.PATCH-PRERELEASE"),"):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"MAJOR number:")," When upgrading to a new major version, there are no compatibility guarantees.\nBreaking changes are possible. ",(0,i.kt)("br",null),"\nFor example if ",(0,i.kt)("inlineCode",{parentName:"p"},"2.0.0")," is bumped to ",(0,i.kt)("inlineCode",{parentName:"p"},"3.0.0"),", an existing API might get removed or renamed.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"MINOR number:")," Guaranteed backwards compatible; but may not be forwards compatible. ",(0,i.kt)("br",null),"\nFor example if ",(0,i.kt)("inlineCode",{parentName:"p"},"2.0.0")," is bumped to ",(0,i.kt)("inlineCode",{parentName:"p"},"2.1.0"),", a new API might be added, but an old API shouldn't get removed.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"PATCH number:")," Guaranteed backwards and forwards compatible; bug fixes only. ",(0,i.kt)("br",null),"\nFor example if ",(0,i.kt)("inlineCode",{parentName:"p"},"2.0.0")," is bumped to ",(0,i.kt)("inlineCode",{parentName:"p"},"2.0.1"),", a bug might get fixed, but no API is added or removed.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"PRERELEASE suffix:")," Used to specify a sequence of incremental releases, such as nightly builds,\nrelease candidates for testing, preview releases, etc. ",(0,i.kt)("br",null),"\nFor example, the third test release of pull request #1234 might get published with version ",(0,i.kt)("inlineCode",{parentName:"p"},"5.0.0-pr1234.3"),"."))),(0,i.kt)("p",null,'"Prerelease" tags are optional strings that are appended using a hyphen (',(0,i.kt)("inlineCode",{parentName:"p"},"-"),"). They are so-named because\nthey are considered to precede their base version. For example, the following versions are listed in\n",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"increasing order"))," according to the SemVer rules for ordering:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1.2.3-beta")," (smallest / oldest version)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1.2.3-dev.0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1.2.3-dev.1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1.2.3-dev.2")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1.2.3-pr1234.0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1.2.3-pr1234.1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1.2.3")," (biggest / newest version)")),(0,i.kt)("p",null,"Be careful: The ordering rules for prereleases involve complicated string parsing heuristics,\nand the version range matching rules can be counterintuitive."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"SemVer syntax vs semantics")),(0,i.kt)("p",{parentName:"blockquote"},'Many NPM packages use SemVer syntax but do not implement its behavioral semantics.\nSome packages are simply careless about their interface contracts. Other projects\nintentionally chose a looser convention, where MAJOR bumps are reserved for big changes,\nand MINOR and PATCH increments indicate "less significant changes" that may still break\nan interface contract.')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"SemVer metadata suffix: best avoided")),(0,i.kt)("p",{parentName:"blockquote"},'The SemVer spec defines an optional "metadata" string specified using the ',(0,i.kt)("inlineCode",{parentName:"p"},"+")," character,\nfor example ",(0,i.kt)("inlineCode",{parentName:"p"},"5.0.0-pr1234.3+git20a70b7"),". Its purpose is to distinguish different builds\nof the same version, such as QA release candidates. We recommend NOT to use metadata suffixes;\nbuild numbers and release versions are separate problems, best tackled separately.\nIf you need to track a build identifier, find some other field to store it in.")),(0,i.kt)("h2",{id:"version-range-cheat-sheet"},'"Version range" cheat sheet'),(0,i.kt)("p",null,'The following version range syntaxes are commonly used with NPM packages, and can be considered "best practices":'),(0,i.kt)("div",{className:"markdown-table-nowrap-col-1"},(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Example syntax"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"1.2.3")),(0,i.kt)("td",{parentName:"tr",align:"left"},"If an exact version is used, it matches only that single version")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"*")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The star will matches any version without restrictions")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},">=1.2.3")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Comparison operators (",(0,i.kt)("inlineCode",{parentName:"td"},"<"),", ",(0,i.kt)("inlineCode",{parentName:"td"},">"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"<="),", ",(0,i.kt)("inlineCode",{parentName:"td"},">="),") match according to the ordering of versions.  In this example, ",(0,i.kt)("inlineCode",{parentName:"td"},"1.2.3")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"5.0.0"),", but not ",(0,i.kt)("inlineCode",{parentName:"td"},"1.2.2"),". Note that ",(0,i.kt)("inlineCode",{parentName:"td"},"1.2.3-prerelease.1")," will also match,  but ",(0,i.kt)("inlineCode",{parentName:"td"},"1.2.4-prerelease.0")," will NOT -- ",(0,i.kt)("strong",{parentName:"td"},"prerelease versions")," only match ranges with equal MAJOR/MINOR/PATCH.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},">=1.2.3-prerelease.0")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Note that a ",(0,i.kt)("strong",{parentName:"td"},"prerelease range")," can match a differing MAJOR/MINOR/PATCH.  This example will match both ",(0,i.kt)("inlineCode",{parentName:"td"},"5.0.0")," and ",(0,i.kt)("inlineCode",{parentName:"td"},">=1.2.3-prerelease.2")," (but NOT ",(0,i.kt)("inlineCode",{parentName:"td"},"1.2.4-prerelease.0"),").")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},">=1.2.3 <3.0.0")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Concatenated ranges specify an AND conjunction.  In this example, ",(0,i.kt)("inlineCode",{parentName:"td"},"1.2.3")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"2.0.0")," but not ",(0,i.kt)("inlineCode",{parentName:"td"},"3.0.0")," nor ",(0,i.kt)("inlineCode",{parentName:"td"},"1.0.0"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"~1.2.3")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The tilde (",(0,i.kt)("inlineCode",{parentName:"td"},"~"),") shorthand matches equal or newer versions within the same PATCH version.  The example ",(0,i.kt)("inlineCode",{parentName:"td"},"~1.2.3")," is equivalent to ",(0,i.kt)("inlineCode",{parentName:"td"},">=1.2.3 <1.3.0"),". See ",(0,i.kt)("strong",{parentName:"td"},"MAJOR Version 0")," warning below.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"^1.2.3")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The caret (",(0,i.kt)("inlineCode",{parentName:"td"},"^"),") shorthand matches equal or newer versions within the same MINOR version.  The example ",(0,i.kt)("inlineCode",{parentName:"td"},"^1.2.3")," is equivalent to ",(0,i.kt)("inlineCode",{parentName:"td"},">=1.2.3 <2.0.0"),". See ",(0,i.kt)("strong",{parentName:"td"},"MAJOR Version 0")," warning below.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"}," ",(0,i.kt)("code",null,"^1.0.0 ","|","|"," ^2.0.0")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The ",(0,i.kt)("code",null,"|","|")," operator specifies an OR disjunction.  This example will match either ",(0,i.kt)("inlineCode",{parentName:"td"},"^1.0.0")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"^2.0.0"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"workspace:*")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Expressions with colon prefixes such as ",(0,i.kt)("inlineCode",{parentName:"td"},"npm:")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"workspace:")," are actually ",(0,i.kt)("strong",{parentName:"td"},"dependency specifiers"),", not SemVer ranges. They are explained in a separate section below."))))),(0,i.kt)("p",null,"The SemVer standard defines many other syntaxes; however, if a syntax doesn't appear in the list above,\nthen we generally recommend to avoid it. Keep your version ranges simple!"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"MAJOR Version 0")),(0,i.kt)("p",{parentName:"blockquote"},"The caret and tilde operators have a special narrower meaning when the MAJOR version is ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,i.kt)("p",{parentName:"blockquote"},"For example, the caret ",(0,i.kt)("inlineCode",{parentName:"p"},"^0.1.2")," will match ",(0,i.kt)("inlineCode",{parentName:"p"},">=0.1.2 <0.2.0"),", as if it was a tilde."),(0,i.kt)("p",{parentName:"blockquote"},"And ",(0,i.kt)("inlineCode",{parentName:"p"},"~0.1.2")," is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"0.1.2"),", as if it was an exact version."),(0,i.kt)("p",{parentName:"blockquote"},"The idea is to enable the MAJOR version to be kept at 0 through a series of early releases\nthat may include breaking changes, and then version 1.0.0 can be used for the first stable release.\nMany people are unaware of this behavior.")),(0,i.kt)("p",null,"The most commonly used syntaxes are ",(0,i.kt)("inlineCode",{parentName:"p"},"^1.2.3")," for packages known to be stable, and ",(0,i.kt)("inlineCode",{parentName:"p"},"~1.2.3")," for packages\nthat have been known to violate SemVer by introducing breaking changes in a MINOR release."),(0,i.kt)("p",null,"Unbounded MAJOR ranges such as ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," or ",(0,i.kt)("inlineCode",{parentName:"p"},">2.0.0")," are generally not recommended, unless constrained in\nsome other way such as via a peer dependency. (The special ",(0,i.kt)("inlineCode",{parentName:"p"},"workspace:*")," notation is okay\nbecause its wildcard gets rewritten to an exact version during publishing.)"),(0,i.kt)("h2",{id:"semver-surprises"},"SemVer surprises"),(0,i.kt)("p",null,"Here's a quick list of SemVer edge cases that can be counterintuitive for casual users:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~0.1.2")," does NOT match ",(0,i.kt)("inlineCode",{parentName:"li"},"0.1.3"),' -- see the "MAJOR Version 0" note above'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"^0.1.2")," does NOT match ",(0,i.kt)("inlineCode",{parentName:"li"},"0.2.0"),' -- see the "MAJOR Version 0" note above'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"^1.0.0")," does NOT match ",(0,i.kt)("inlineCode",{parentName:"li"},"1.0.0-hotfix.0"),' because the "hotfix" is using PRERELEASE syntax,\nconsidered "smaller" than ',(0,i.kt)("inlineCode",{parentName:"li"},"1.0.0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"^1.0.0")," does NOT match ",(0,i.kt)("inlineCode",{parentName:"li"},"1.0.1-hotfix.0")," because prereleases only match their base version"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},">1.0.0")," does NOT match ",(0,i.kt)("inlineCode",{parentName:"li"},"1.0.1-hotfix.0")," for the same reason"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"^1.0.0-beta")," DOES match ",(0,i.kt)("inlineCode",{parentName:"li"},"1.2.3")," because prerelease ranges do match newer versions")),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("a",{parentName:"p",href:"https://semver.npmjs.com/"},"SemVer calculator")," website to experiment with SemVer range expressions\nto see what they match."),(0,i.kt)("h2",{id:"dependency-specifier-cheat-sheet"},'"Dependency specifier" cheat sheet'),(0,i.kt)("p",null,"Strictly speaking, the ",(0,i.kt)("inlineCode",{parentName:"p"},'"dependencies"')," table in ",(0,i.kt)("strong",{parentName:"p"},"package.json")," maps to a ",(0,i.kt)("strong",{parentName:"p"},"dependency specifier")," syntax,\nwhich is a superset of ",(0,i.kt)("strong",{parentName:"p"},"SemVer ranges"),". Here's some examples:"),(0,i.kt)("div",{className:"markdown-table-nowrap-col-1"},(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Example syntax"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},'"foo": "beta"')),(0,i.kt)("td",{parentName:"tr",align:"left"},"Install the specific version of NPM package ",(0,i.kt)("inlineCode",{parentName:"td"},"foo")," that is currently tagged using the ",(0,i.kt)("inlineCode",{parentName:"td"},"beta")," ",(0,i.kt)("a",{parentName:"td",href:"https://docs.npmjs.com/cli/v9/commands/npm-dist-tag"},"dist-tag"),", according to the NPM registry")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},'"foo": "workspace:^1.2.3"')),(0,i.kt)("td",{parentName:"tr",align:"left"},"Symlink ",(0,i.kt)("inlineCode",{parentName:"td"},"foo")," from the project folder in your local PNPM workspace, instead of installing a package from the NPM registry. If the containing package gets published, during publishing ",(0,i.kt)("inlineCode",{parentName:"td"},"pnpm publish")," will transform ",(0,i.kt)("inlineCode",{parentName:"td"},'"workspace:^1.2.3"')," to ",(0,i.kt)("inlineCode",{parentName:"td"},'"^1.2.3"')," in the published ",(0,i.kt)("strong",{parentName:"td"},"package.json")," file.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},'"foo": "workspace:*"')),(0,i.kt)("td",{parentName:"tr",align:"left"},"The string ",(0,i.kt)("inlineCode",{parentName:"td"},"workspace:*")," is handled specially by PNPM during publishing.  It will match any version, but during publishing the ",(0,i.kt)("inlineCode",{parentName:"td"},"workspace:*")," string will get transformed to the exact version  of that package. For example, suppose ",(0,i.kt)("inlineCode",{parentName:"td"},"foo")," is a local project with version ",(0,i.kt)("inlineCode",{parentName:"td"},"1.2.3"),". During publishing,  ",(0,i.kt)("inlineCode",{parentName:"td"},"workspace:^1.0.0")," would transform to ",(0,i.kt)("inlineCode",{parentName:"td"},"^1.0.0"),", whereas ",(0,i.kt)("inlineCode",{parentName:"td"},"workspace:*")," would transform to ",(0,i.kt)("inlineCode",{parentName:"td"},"1.2.3"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},'"foo2": "npm:foo@^2.0.0"')),(0,i.kt)("td",{parentName:"tr",align:"left"},"Install ",(0,i.kt)("inlineCode",{parentName:"td"},"foo")," with version range ",(0,i.kt)("inlineCode",{parentName:"td"},"^2.0.0"),", but into ",(0,i.kt)("inlineCode",{parentName:"td"},"node_modules/foo2/")," (for example because we already installed version 1 in ",(0,i.kt)("inlineCode",{parentName:"td"},"node_modules/foo/"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},'"foo": "file:./path/to/foo.tgz"')),(0,i.kt)("td",{parentName:"tr",align:"left"},"Install ",(0,i.kt)("inlineCode",{parentName:"td"},"foo")," by extracting ",(0,i.kt)("strong",{parentName:"td"},"foo.tgz")," from disk. This practice is not recommended, but called out here because it was used by Rush's legacy installation model (with ",(0,i.kt)("inlineCode",{parentName:"td"},"useWorkspaces=false"),")."))))),(0,i.kt)("h2",{id:"see-also"},"See Also"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://semver.npmjs.com/"},"SemVer calculator")," - an interactive online tool for testing SemVer range expressions to see which versions they match"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://semver.org/"},"SemVer Specification")," - the reference document for the SemVer standard"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/semver"},'"semver" NPM package')," - a CLI tool and JavaScript library for parsing SemVer strings")))}u.isMDXComponent=!0}}]);